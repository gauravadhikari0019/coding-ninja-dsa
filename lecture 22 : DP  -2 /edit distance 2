public class Solution {

    public static int editDistance(String s, String t) {
        int m = s.length();
        int n = t.length();
        
        // Create a 2D array to store the edit distances
        int[][] dp = new int[m + 1][n + 1];
        
        // Initialize the base cases
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0) {
                    dp[i][j] = j; // If s is empty, the distance is the length of t
                } else if (j == 0) {
                    dp[i][j] = i; // If t is empty, the distance is the length of s
                } else if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    // If the characters are equal, no operation needed, take the diagonal value
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    // Otherwise, consider all three operations and take the minimum
                    dp[i][j] = 1 + Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]);
                }
            }
        }
        
        // Return the edit distance between s and t
        return dp[m][n];
    }

    public static void main(String[] args) {
        String s1 = "abc";
        String t1 = "dc";
        System.out.println(editDistance(s1, t1)); // Output: 2
        
        String s2 = "whgtdwhgtdg";
        String t2 = "aswcfg";
        System.out.println(editDistance(s2, t2)); // Output: 9
    }
}
